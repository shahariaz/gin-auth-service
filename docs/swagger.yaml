basePath: /
definitions:
  model.CreateUserRequest:
    description: Admin user creation request payload
    properties:
      email:
        example: jane@example.com
        type: string
      role_id:
        example: 1
        type: integer
      username:
        example: jane_doe
        minLength: 3
        type: string
    required:
    - email
    - role_id
    - username
    type: object
  model.LoginRequest:
    description: Login request payload
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  model.RefreshTokenRequest:
    description: Refresh token request payload
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  model.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      username:
        example: john_doe
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.UpdateProfileRequest:
    description: Profile update request payload
    properties:
      email:
        example: newemail@example.com
        type: string
    required:
    - email
    type: object
  model.UpdateUserRequest:
    description: Admin user update request payload
    properties:
      email:
        example: jane.updated@example.com
        type: string
      role_id:
        example: 2
        type: integer
      username:
        example: jane_doe_updated
        minLength: 3
        type: string
    required:
    - email
    - role_id
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A production-ready authentication API built with Gin framework, featuring
    JWT authentication, RBAC, and comprehensive user management
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Gin Authentication API
  version: "1.0"
paths:
  /api/admin/users:
    get:
      description: Get a list of all users in the system (requires admin role)
      produces:
      - application/json
      responses:
        "200":
          description: Users list retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - admin role required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all users (Admin only)
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: Create a new user account (requires admin role)
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error or user creation failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - admin role required
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new user (Admin only)
      tags:
      - Admin
  /api/admin/users/{id}:
    delete:
      description: Delete a user account (requires admin role)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid user ID or deletion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - admin role required
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user (Admin only)
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: Update user information (requires admin role)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error or user update failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - admin role required
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user (Admin only)
      tags:
      - Admin
  /api/profile:
    delete:
      description: Delete the authenticated user's account
      produces:
      - application/json
      responses:
        "200":
          description: Profile deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - profile deletion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user profile
      tags:
      - User Profile
    get:
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User Profile
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Profile update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error or update failed
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid or missing token
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User Profile
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns access and refresh
        tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful with tokens and user info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Authentication
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user by blacklisting the refresh token
      parameters:
      - description: Refresh token to logout
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - validation error or logout failed
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User logout
      tags:
      - Authentication
  /refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token using a valid refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access token generated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized - invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account with username, email and password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - validation error or user already exists
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Authentication
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
